USE sakila;

TABLE actor;
TABLE store;

#1 List the number of films per category.
SELECT c.name, COUNT(f.film_id) AS film_count #Assigning aliases helps not repeating 
FROM film AS f
INNER JOIN film_category AS fc
ON f.film_id = fc.film_id
INNER JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name;


#2 Retrieve the store ID, city, and country for each store. Shouldn't I get the list of all stores or is it that we just have data in common of these 2 stores?
SELECT s.store_id, c.city, co.country
FROM store AS s
INNER JOIN address as a
ON s.address_id = a.address_id
INNER JOIN city as c
ON a.city_id = c.city_id
INNER JOIN country as co
ON c.country_id = co.country_id;

#3 Calculate the total revenue generated by each store in dollars.
SELECT sto.store_id, SUM(p.amount) AS revenue
FROM payment as p
INNER JOIN staff as s
ON p.staff_id = s.staff_id
INNER JOIN store as sto
ON s.store_id = sto.store_id
GROUP BY s.store_id;

#4 Determine the average running time of films for each category.
SELECT c.name, AVG(f.length) AS avg_film_duration #Assigning aliases helps not repeating 
FROM film AS f
INNER JOIN film_category AS fc
ON f.film_id = fc.film_id
INNER JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name;

#Bonus:
#5. Identify the film categories with the longest average running time.


#6. Display the top 10 most frequently rented movies in descending order.



#7. Determine if "Academy Dinosaur" can be rented from Store 1.



#8. Provide a list of all distinct film titles, along with their availability 
#status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, and this information can be obtained using a 
#CASE statement combined with IFNULL."

#Follo the tips